#run cmd:
#/mnt/d/snc/Gdisk/prg/arc/libunrar-js/compile_cmd_wsl
#arc/libunrar-js/src/wcchoi.js - original file

cd ~/emsdk
source ./emsdk_env.sh

cp -f  /mnt/d/snc/Gdisk/prg/arc/libunrar-js/src/wcchoi.js /mnt/d/snc/Gdisk/prg/arc/unrar_src/wcchoi.js

cd /mnt/d/snc/Gdisk/prg/arc/unrar_src

cat glue.js _.js > glue_r.js
emcc glue_wrapper.cpp rar.cpp strlist.cpp strfn.cpp pathfn.cpp smallfn.cpp global.cpp file.cpp filefn.cpp filcreat.cpp \
archive.cpp arcread.cpp unicode.cpp system.cpp isnt.cpp crypt.cpp crc.cpp rawread.cpp encname.cpp resource.cpp \
match.cpp timefn.cpp rdwrfn.cpp consio.cpp options.cpp errhnd.cpp rarvm.cpp secpassword.cpp rijndael.cpp getbits.cpp \
sha1.cpp sha256.cpp blake2s.cpp hash.cpp extinfo.cpp extract.cpp volume.cpp list.cpp find.cpp unpack.cpp headers.cpp \
threadpool.cpp rs16.cpp cmddata.cpp ui.cpp filestr.cpp scantree.cpp dll.cpp qopen.cpp \
-s "EXPORTED_FUNCTIONS=['_RAROpenArchiveEx','_RARCloseArchive','_RARReadHeaderEx','_RARProcessFileW', '_RARSetPassword']" \
-s EXTRA_EXPORTED_RUNTIME_METHODS=['addFunction','removeFunction','FS','UTF8ToString','stringToUTF8','ensureString','WORKERFS','mount','unmount'] \
-o libunrar.js  --post-js glue_r.js -DRARDLL -s RESERVED_FUNCTION_POINTERS=20 -s NO_EXIT_RUNTIME=1  \
-O3 -s ALLOW_MEMORY_GROWTH=1 --closure 1 -s ASSERTIONS=0 \
-s WASM=1 -Wno-dangling-else -s FORCE_FILESYSTEM=1 -lworkerfs.js
cat pre.js libunrar.js wcchoi.js > res.js
mv res.js libunrar.js -f


cp -f libunrar.js /mnt/d/snc/Gdisk/prg/arc/libunrar-js/libunrar.js
cp -f libunrar.wasm /mnt/d/snc/Gdisk/prg/arc/libunrar-js/libunrar.wasm


echo 'done'
